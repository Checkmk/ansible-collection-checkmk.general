---
- name: "Create Sites."
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    omd -V {{ item.version }}.{{ checkmk_server_edition | lower }} create {{ item.name }}
  args:
    executable: /bin/bash
    creates: "/omd/sites/{{ item.name }}"
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.state != "absent"
  register: __checkmk_server_sites_created
  tags:
    - create-sites

- name: "Get site version."
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    omd version {{ item.name }} | egrep -o '[^ ]+$'
  args:
    executable: /bin/bash
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  changed_when: "__checkmk_server_sites_versions.stdout != item.version + '.' + checkmk_server_edition | lower"
  when: item.state != "absent"
  register: __checkmk_server_sites_versions
  tags:
    - update-sites

- name: "Include update site tasks."  # noqa no-handler
  ansible.builtin.include_tasks: update-site.yml
  loop: "{{ __checkmk_server_sites_versions.results }}"
  when: "item.changed"
  tags:
    - update-sites

- name: "Enable Sites."  # noqa no-changed-when
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if [ "$(omd config {{ item.name }} show AUTOSTART)" != "on" ]
    then
      omd config {{ item.name }} set AUTOSTART on
      echo "Autostart enabled."
    fi
  args:
    executable: /bin/bash
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: (item.state == "enabled") or (item.state == "started")
  register: __checkmk_server_sites_stopped
  changed_when: "'Autostart enabled.' in __checkmk_server_sites_stopped.stdout"
  tags:
    - enable-sites

- name: "Start Sites."
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    omd start {{ item.name }}
  args:
    executable: /bin/bash
    creates: "/opt/omd/sites/{{ item.name }}/tmp/run/live"
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.state == "started"
  register: __checkmk_server_sites_started
  tags:
    - start-sites

- name: "Stop Sites."
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    omd stop {{ item.name }}
  args:
    executable: /bin/bash
    removes: "/opt/omd/sites/{{ item.name }}/tmp/run/live"
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.state != "started"
  register: __checkmk_server_sites_stopped
  tags:
    - stop-sites

- name: "Disable Sites."  # noqa no-changed-when
  become: true
  ansible.builtin.shell: |
    if [ "$(omd config {{ item.name }} show AUTOSTART)" != "off" ]
    then
      omd config {{ item.name }} set AUTOSTART off
      echo "Autostart disabled."
    fi
  args:
    executable: /bin/bash
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: (item.state == "disabled") or (item.state == "present") or (item.state == "stopped")
  register: __checkmk_server_sites_stopped
  changed_when: "'Autostart disabled.' in __checkmk_server_sites_stopped.stdout"
  tags:
    - disable-sites

- name: "Destroy Sites."
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    (yes yes || true) | omd rm {{ item.name }}
  args:
    executable: /bin/bash
    removes: "/omd/sites/{{ item.name }}"
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.state == "absent"
  register: __checkmk_server_sites_removed
  tags:
    - destroy-sites

- name: "Include site configuration tasks."
  ansible.builtin.include_tasks: configure-site.yml
  loop: "{{ checkmk_server_sites }}"
  loop_control:
    loop_var: outer_item
  when: |
    outer_item.omd_config is defined and
    ((outer_item.omd_auto_restart is defined and outer_item.omd_auto_restart | bool) or
    (outer_item.state == "stopped" or outer_item.state == "disabled" or outer_item.state == "present"))
  tags:
    - configure-sites

- name: "Update Site Admin Password for Checkmk < 2.1."  # noqa no-changed-when
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    echo '{{ item.admin_pw }}' | htpasswd -i /omd/sites/{{ item.name }}/etc/htpasswd cmkadmin
  args:
    executable: /bin/bash
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.admin_pw is defined and (item.state != "absent") and (item.version | regex_replace('p.*', '') is version('2.1', '<'))
  tags:
    - set-site-admin-pw

# In the future this should be done with 'cmk-passwd' available from 2.1.0p16 (https://checkmk.com/werk/14389)
# To keep things simple, we do it in a more generic way here, which works in all 2.1 releases
- name: "Update Site Admin Password for Checkmk >= 2.1."  # noqa no-changed-when
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    echo '{{ item.admin_pw }}' | htpasswd -i -B -C 12 /omd/sites/{{ item.name }}/etc/htpasswd cmkadmin
  args:
    executable: /bin/bash
  no_log: "{{ checkmk_server_no_log | bool }}"
  loop: "{{ checkmk_server_sites }}"
  when: item.admin_pw is defined and (item.state != "absent") and (item.version | regex_replace('p.*', '') is version('2.1', '>='))
  tags:
    - set-site-admin-pw

- name: "Trigger warning about missing cmkadmin password."
  ansible.builtin.debug:
    msg:
      - "Just a trigger."
  loop: "{{ __checkmk_server_sites_created.results }}"
  when: __checkmk_server_sites_created.changed | bool and not item.item.admin_pw is defined
  changed_when: true
  notify: Warn site admin password
  no_log: "{{ checkmk_server_no_log | bool }}"
