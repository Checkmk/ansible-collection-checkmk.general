---
- name: "Include Checkmk version specific Variables."
  ansible.builtin.include_vars: "{{ outer_item.version | regex_search('^[0-9]+[.][0-9]+[.][0-9]+') }}.yml"

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Create rules."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.ruleset }}"
    rule: "{{ item.rule }}"
    state: "present"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ checkmk_var_rules }}"
  register: __checkmk_var_created_rules

# - name: Extract all rules from employed rulesets
#   ansible.builtin.uri:
#     url: '{{ checkmk_var_server_url }}/{{ outer_item.site }}/check_mk/api/1.0/domain-types/rule/collections/all?ruleset_name={{ item.ruleset }}'
#     method: get
#     status_code: [200]
#     headers:
#       Authorization: "Bearer {{ checkmk_var_automation_user }} {{ checkmk_var_automation_secret }}"
#       Accept: "application/json"
#       Content-Type: "application/json"
#   changed_when: false
#   delegate_to: localhost
#   run_once: true  # noqa run-once[task]
#   register: output
#   loop: "{{ checkmk_var_rules }}"

# - name: Print extracted info
#   ansible.builtin.debug:
#     var: output.results

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Create rules. Again"
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.ruleset }}"
    rule: "{{ item.rule }}"
    state: "present"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ checkmk_var_rules }}"
  register: __checkmk_var_result_rules_create
  failed_when: __checkmk_var_result_rules_create.changed

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Modify rules."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.content.extensions.ruleset }}"
    rule:
      rule_id: "{{ item.content.id }}"
      conditions: "{{ item.content.extensions.conditions }}"
      properties:
        comment: "{{ item.content.extensions.properties.comment | default('') }}"
        description: "New description"
      value_raw: "{{ item.content.extensions.value_raw | string }}"
    state: "present"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ __checkmk_var_created_rules.results }}"
  loop_control:
    label: "{{ item.content.id }}"

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Modify rules. Again."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.content.extensions.ruleset }}"
    rule:
      rule_id: "{{ item.content.id }}"
      conditions: "{{ item.content.extensions.conditions }}"
      properties:
        comment: "{{ item.content.extensions.properties.comment | default('') }}"
        description: "New description"
      value_raw: "{{ item.content.extensions.value_raw | string }}"
    state: "present"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ __checkmk_var_created_rules.results }}"
  loop_control:
    label: "{{ item.content.id }}"
  register: __checkmk_var_result_rules_modify
  failed_when: __checkmk_var_result_rules_modify.changed

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Modify rules found by a lookup."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.extensions.ruleset }}"
    rule:
      rule_id: "{{ item.id }}"
      conditions: "{{ item.extensions.conditions }}"
      properties:
        comment: "{{ item.extensions.properties.comment }}"
        description: "Even newer description"
      value_raw: "{{ item.extensions.value_raw | string }}"
    state: "present"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ lookup('checkmk.general.rules',
      ruleset='checkgroup_parameters:filesystem',
      comment_regex='Ansible managed',
      server_url=checkmk_var_server_url,
      site=outer_item.site,
      automation_user=checkmk_var_automation_user,
      automation_secret=checkmk_var_automation_secret,
      validate_certs=False) }}"
  loop_control:
    label: "{{ item.id }}"

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Delete rules."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.content.extensions.ruleset }}"
    rule:
      rule_id: "{{ item.content.id }}"
    state: "absent"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ __checkmk_var_created_rules.results }}"
  loop_control:
    label: "{{ item.content.id }}"

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Activate."
  activation:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    force_foreign_changes: true
    sites:
      - "{{ outer_item.site }}"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]

- name: "{{ outer_item.version }} - {{ outer_item.edition | upper }} - Delete rules. Again."
  rule:
    server_url: "{{ checkmk_var_server_url }}"
    site: "{{ outer_item.site }}"
    automation_user: "{{ checkmk_var_automation_user }}"
    automation_secret: "{{ checkmk_var_automation_secret }}"
    ruleset: "{{ item.content.extensions.ruleset }}"
    rule:
      rule_id: "{{ item.content.id }}"
    state: "absent"
  delegate_to: localhost
  run_once: true  # noqa run-once[task]
  loop: "{{ __checkmk_var_created_rules.results }}"
  loop_control:
    label: "{{ item.content.id }}"
  register: __checkmk_var_result_rules_delete
  failed_when: __checkmk_var_result_rules_delete.changed
